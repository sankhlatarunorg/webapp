name: Webapp CI Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    name : Build
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js  ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install DB Setup
        env:
          DB_HOST:     ${{ secrets.DB_HOST }}
          DB_PORT:     ${{ secrets.DB_PORT }}
          DB_USER:     ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME:     ${{ secrets.DB_NAME }}
          DB_DIALECT : ${{ secrets.DB_DIALECT }}
          BUILD_ENV :  ${{ secrets.BUILD_ENV }}
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" -u$DB_USER -p$DB_PASSWORD
            
      - name: Install NPM dependencies
        run: npm ci

      - name: Run Hello world
        run: echo "Hello World"
 
      - name: Checking if environment variables are set
        run: echo  ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT}} ${{secrets.DB_USER}} ${{secrets.DB_PASSWORD}} ${{secrets.DB_NAME}} ${{secrets.DB_DIALECT}}

      - name: Run tests
        env:
          DB_HOST:     ${{ secrets.DB_HOST }}
          DB_PORT:     ${{ secrets.DB_PORT }}
          DB_USER:     ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME:     ${{ secrets.DB_NAME }}
          DB_DIALECT : ${{ secrets.DB_DIALECT }}
          BUILD_ENV : ${{ secrets.BUILD_ENV }}
        run: npm test

  format_packer_template:
    name: Format Packer Template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Format Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: fmt
          target   : webappImage.json.pkr.hcl
      
  prepare_artifact:
    name: Prepare Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name : Build Artifact
        run : zip -r webapp.zip ./

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: webapp.zip

      - name: Approval
        run: bash ./scripts/testing_yaml.sh

  validate_packer_template:
    name: Validate Packer Template
    needs: [prepare_artifact]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name : Build Artifact
        run : zip -r webapp.zip ./

      - name: Approval
        run: bash ./scripts/testing_yaml.sh

      - name: Initialize Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target : webappImage.json.pkr.hcl
     
 
      - name: Validate Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target : webappImage.json.pkr.hcl 
  
  download_artifact:
    name: Download Artifact
    runs-on: ubuntu-latest
    needs: [prepare_artifact]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: webapp
          path: ./artifact/

  test_yaml:
    name: Test YAML
    runs-on: ubuntu-latest
    needs: [validate_packer_template]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Approval
        run: bash ./scripts/testing_yaml.sh
  
  build_custom_image:
    name: Build Custom Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name : Build Artifact
        run : zip -r webapp.zip ./

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CREDENTIALS }}
      - name: Approval
        run: bash ./scripts/testing_yaml.sh
      - name: Packer initialize
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
      
      - name: Set up Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: build 
          target:  webappImage.json.pkr.hcl
  update_instance_template_and_mig:
      runs-on: ubuntu-latest
      needs: [build_custom_image]
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - id: auth
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ secrets.CREDENTIALS }}
          
        # - name: Set up Google Cloud SDK
        #   uses: google-github-actions/setup-gcloud@v0.2.0
        #   with:
        #     project_id: ${{ secrets.GCP_PROJECT_ID }}
        #     service_account_key: ${{ secrets.GCP_SA_KEY }}
            # export_default_credentials: true
        
        - name: Get latest machine image id
          id: get_image_id
          run: |
            latest_image_id=$( gcloud compute images list --format="value(NAME)" --sort-by="creationTimeStamp" --filter="name~csye" --limit=1)
            echo "::set-output name=image_id::$latest_image_id"
          
        - name: Create new Instance Template version
          id: create_template_version
          run: |
            gcloud compute instance-templates create webapp-vm-instance-template \
              --source-instance-template webapp-vm-instance-template \
              --image steps.get_image_id.outputs.image_id
              -- region us-central1
      #--image steps.get_image_id.outputs.image_id
        
        - name: Update Managed Instance Group
          run: |
            gcloud compute instance-groups managed set-instance-template webapp-instance-group-manager-1 \
              -- template webapp-vm-instance-template \
              -- region us-central1
        
        - name: Re-create instances in Managed Instance Group
          run: |
            gcloud compute instance-groups managed recreate-instances webapp-instance-group-manager-1 \
              --region us-central1
          
        # Wait for the managed instance group to finish refreshing
        - name: Wait for Managed Instance Group Refresh
          id: wait_refresh
          run: |
            gcloud compute instance-groups managed wait-until --region us-central1 --quiet webapp-instance-group-manager-1 --stable
        
        # Set the workflow status based on the status of the instance group refresh
        - name: Set workflow status
          if: ${{ steps.wait_refresh.outcome == 'success' }}
          run: exit 0
        - name: Set workflow status
          if: ${{ steps.wait_refresh.outcome == 'failure' }}
          run: exit 1
