name: Webapp CI merge

on:
  push:
    branches: [ main ]

jobs:
  build:
    name : Build
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js  ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install DB Setup
        env:
          DB_HOST:     ${{ secrets.DB_HOST }}
          DB_PORT:     ${{ secrets.DB_PORT }}
          DB_USER:     ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME:     ${{ secrets.DB_NAME }}
          DB_DIALECT : ${{ secrets.DB_DIALECT }}
          BUILD_ENV : ${{ secrets.BUILD_ENV }}
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" -u$DB_USER -p$DB_PASSWORD
            
      - name: Install NPM dependencies
        run: npm ci

      - name: Run Hello world
        run: echo "Hello World"
  
      - name: Checking if environment variables are set
        run: echo  ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT}} ${{secrets.DB_USER}} ${{secrets.DB_PASSWORD}} ${{secrets.DB_NAME}} ${{secrets.DB_DIALECT}}

      - name: Run tests
        env:
          DB_HOST:     ${{ secrets.DB_HOST }}
          DB_PORT:     ${{ secrets.DB_PORT }}
          DB_USER:     ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME:     ${{ secrets.DB_NAME }}
          DB_DIALECT : ${{ secrets.DB_DIALECT }}
          BUILD_ENV : ${{ secrets.BUILD_ENV }}
        run: npm test

  validate_packer_template:
    name: Validate Packer Template
    needs: [prepare_artifact]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name : Build Artifact
        run : zip -r webapp.zip ./

      - name: Approval
        run: bash ./scripts/testing_yaml.sh

      - name: Initialize Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target : webappImage.json.pkr.hcl
      
  
      - name: Validate Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target : webappImage.json.pkr.hcl 
          
  prepare_artifact:
    name: Prepare Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name : Build Artifact
        run : zip -r webapp.zip ./

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
            name: webapp
            path: webapp.zip

      - name: Approval
        run: bash ./scripts/testing_yaml.sh
  
  build_custom_image:
    name: Build Custom Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name : Build Artifact
        run : zip -r webapp.zip ./

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CREDENTIALS }}
      - name: Approval
        run: bash ./scripts/testing_yaml.sh
      - name: Packer initialize
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
      
      - name: Set up Packer
        uses: hashicorp/packer-github-actions@master
        with:
          command: build 
          target:  webappImage.json.pkr.hcl

  update_instance_template_and_mig:
      runs-on: ubuntu-latest
      needs: [build_custom_image]
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - id: auth
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ secrets.CREDENTIALS }}

        - name: Get latest machine image id
          id: get_image_id
          run: |
            latest_image_id=$( gcloud compute images list --format="value(NAME)" --sort-by="creationTimeStamp" --filter="name~csye" --limit=1)
            echo "::set-output name=image_id::$latest_image_id"
        - id: create_template_name
          run: |
            template_name="webapp-vm-instance-template-$(date +%s)" 
            echo "::set-output name=template_name::$template_name"
        
        - name: Instance Host
          id: get_instance_host
          run: |
            instance_host=$(gcloud compute instance-templates describe webapp-vm-instance-template --format="value(properties.metadata.items.DB_HOST)" --project=csye6225tarundev --region=${{secrets.REGION}})
            echo "::set-output name=instance_host::$instance_host"
        - name: Instance Password
          id: get_instance_password
          run: |
            instance_password=$(gcloud compute instance-templates describe webapp-vm-instance-template --format="value(properties.metadata.items.DB_PASSWORD)" --project=csye6225tarundev --region=${{secrets.REGION}})
            echo "::set-output name=instance_password::$instance_password"
          
        - name: Fetch Key ring
          id: fetch_key_ring
          run: |
            key_ring=$(gcloud compute instance-templates describe webapp-vm-instance-template --format="value(properties.disks.diskEncryptionKey.kmsKeyName)" --project=csye6225tarundev --region=${{secrets.REGION}})
            echo "::set-output name=key_ring::$key_ring"
          

        - name: Create new Instance Template version
          run:  gcloud beta compute instance-templates create ${{steps.create_template_name.outputs.template_name}} --project=csye6225tarundev --machine-type=e2-standard-2 --network-interface=subnet=webapp-subnetwork-1,no-address --instance-template-region=${{secrets.REGION}} --metadata=DB_HOST=${{steps.get_instance_host.outputs.instance_host}},DB_NAME=webapp,DB_PASSWORD=${{steps.get_instance_password.outputs.instance_password}},DB_USER=webapp,startup-script=\#\!/bin/bash$'\n'echo\ \"Web\ application\ is\ starting\ up...\"$'\n'if\ \[\[\ \!\ -e\ /tmp/webapp/.env\ \]\]\;\ then$'\n'\ \ touch\ /tmp/webapp/.env$'\n'fi$'\n'$'\n'if\ \[\[\ \!\ -e\ \"/var/run/webapp_configured\"\ \]\]\;\ then$'\n'\ \ echo\ \"Configuring\ web\ application...\"$'\n'\ \ \{$'\n'\ \ \ \ echo\ \"DB_USER=webapp\"$'\n'\ \ \ \ echo\ \"DB_PASSWORD=${{steps.get_instance_password.outputs.instance_password}}\"$'\n'\ \ \ \ echo\ \"DB_HOST=${{steps.get_instance_host.outputs.instance_host}}\"$'\n'\ \ \ \ echo\ \"DB_NAME=webapp\"$'\n'\ \ \}\ \>\>\ /tmp/webapp/.env$'\n'$'\n'\ \ touch\ /var/run/webapp_configured$'\n'else$'\n'\ \ echo\ \"Web\ application\ is\ already\ configured.\"$'\n'fi$'\n'$'\n'sudo\ systemctl\ stop\ csye-6225$'\n'sudo\ systemctl\ start\ csye-6225$'\n'sudo\ systemctl\ status\ csye-6225$'\n'echo\ \"Web\ application\ is\ configured.\"$'\n'echo\ \"Web\ application\ is\ running.\"$'\n' --maintenance-policy=MIGRATE --provisioning-model=STANDARD --service-account=webapp-service-account@csye6225tarundev.iam.gserviceaccount.com --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.read --region=${{secrets.REGION}} --tags=load-balancer-backend,allow-health-check,http-server,https-server --create-disk=auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/csye6225tarundev/global/images/${{steps.get_image_id.outputs.image_id}},kms-key=${{steps.fetch_key_ring.outputs.key_ring}},mode=rw,size=100,type=pd-balanced --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

        - name: Managed rolling action start update  
          run : gcloud beta compute instance-groups managed rolling-action start-update webapp-instance-group-manager-1 --project=csye6225tarundev --type='proactive' --max-surge=0 --max-unavailable=3 --min-ready=0 --minimal-action='restart' --replacement-method='substitute' --version=template=https://www.googleapis.com/compute/beta/projects/csye6225tarundev/regions/${{secrets.REGION}}/instanceTemplates/${{steps.create_template_name.outputs.template_name}} --region=${{secrets.REGION}}
          
        - name: Wait for Managed Instance Group Refresh
          id: wait_refresh
          run: gcloud compute instance-groups managed wait-until --region ${{secrets.REGION}} --quiet webapp-instance-group-manager-1 --version-target-reached
        
        - name: Set workflow status
          if: ${{ steps.wait_refresh.outcome == 'success' }}
          run: exit 0
        - name: Set workflow status
          if: ${{ steps.wait_refresh.outcome == 'failure' }}
          run: exit 1
